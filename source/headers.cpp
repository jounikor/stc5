//
//
//
//

#include <iostream>
#include <cstring>

#include "headers.h"
#include "bitutils.h"
#include "fio.h"

//
//
//
//

static unsigned char s405_hunk_header[32] = {
    0x00,0x00,0x03,0xf3,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x03,0xe9,0x00,0x00,0x00,0x00
};

static unsigned char s405_hunk_trailer[4] = {
    0x00,0x00,0x03,0xf2
};
        
static unsigned char s405_abs_dec[496] = {
    0x43,0xf9,0x00,0x04,0x00,0x00,0x48,0x79,
    0x00,0x04,0x00,0x00,0x45,0xf9,0x00,0x07,
    0xf5,0xe0,0x41,0xfa,0x01,0xe0,0x26,0x49,
    0x28,0x48,0x70,0x00,0x30,0x1c,0xd9,0xc0,
    0x66,0xfa,0xd7,0xd4,0xb9,0xc9,0x63,0x0e,
    0xb9,0xcb,0x62,0x0a,0x36,0xa4,0x37,0x24,
    0xb9,0xc8,0x62,0xfa,0x20,0x4b,0x54,0x48,
    0x4a,0x60,0x66,0x12,0x2c,0x78,0x00,0x04,
    0x0c,0x6e,0x00,0x25,0x00,0x14,0x65,0x04,
    0x48,0x6e,0xfd,0x84,0x4e,0x75,0x2e,0x18,
    0x7c,0x00,0x48,0x47,0x49,0xea,0x0a,0x00,
    0x76,0x10,0x70,0x0f,0x47,0xea,0x07,0x40,
    0x17,0x80,0x00,0x00,0x51,0xc8,0xff,0xfa,
    0x26,0x4c,0x78,0x1d,0x7a,0x00,0x20,0x07,
    0xe8,0xa8,0xea,0x58,0x80,0x45,0x36,0xc0,
    0x72,0x03,0x61,0x7a,0x52,0x45,0xba,0x43,
    0x65,0xec,0x61,0x00,0x00,0xb6,0xeb,0x4b,
    0x28,0x4a,0x61,0x7e,0xe2,0x4b,0x61,0x7a,
    0x61,0x78,0x2c,0x4a,0x61,0x46,0x94,0x43,
    0x6e,0x06,0x67,0x9c,0x12,0xc2,0x60,0xf2,
    0x53,0x42,0x6f,0x24,0x3a,0x02,0x4d,0xea,
    0x04,0x80,0x61,0x30,0x38,0x02,0x66,0x04,
    0x38,0x0d,0x60,0x12,0x08,0x84,0x00,0x07,
    0x67,0x0c,0xe1,0x4c,0x4d,0xea,0x07,0x00,
    0x61,0x1a,0x18,0x02,0x3a,0x44,0x38,0x44,
    0x30,0x05,0x2c,0x49,0x9d,0xcc,0x12,0xde,
    0x51,0xc8,0xff,0xfc,0x33,0xc6,0x00,0xdf,
    0xf1,0x80,0x60,0xb6,0x26,0x4e,0xbe,0x9e,
    0x62,0xfc,0x4c,0xae,0x00,0x03,0x00,0x3c,
    0x24,0x07,0x42,0x42,0xe3,0xba,0x94,0x40,
    0xd4,0x42,0x34,0x33,0x20,0x00,0x9c,0x41,
    0x6c,0x0c,0xdc,0x41,0xed,0xaf,0x3e,0x18,
    0x92,0x46,0x7c,0x10,0x9c,0x41,0xe3,0xaf,
    0x4e,0x75,0x49,0xec,0x00,0x80,0x2a,0x4c,
    0x7a,0x00,0x4d,0xea,0x09,0x80,0x61,0xc4,
    0x4d,0xea,0x07,0x40,0xdc,0xc2,0x30,0x02,
    0x14,0x16,0x60,0x04,0x1d,0x66,0x00,0x01,
    0x51,0xc8,0xff,0xfa,0x1c,0x82,0xea,0x5a,
    0x84,0x45,0x3a,0xc2,0x52,0x45,0xb6,0x45,
    0x66,0xd8,0x48,0xe7,0x13,0x00,0x78,0x01,
    0x3c,0x3c,0x07,0xff,0x2c,0x4c,0x30,0x1c,
    0xb0,0x46,0x63,0x20,0x3a,0x04,0xda,0x45,
    0x34,0x05,0x3d,0x80,0x50,0xfe,0xe4,0x4d,
    0x67,0x10,0xda,0x45,0x32,0x36,0x50,0xfe,
    0xb0,0x41,0x63,0x06,0x3d,0x81,0x20,0xfe,
    0x60,0xe6,0x52,0x44,0x53,0x43,0x66,0xd6,
    0x55,0x44,0x6b,0x76,0x36,0x04,0xd8,0x44,
    0x47,0xf6,0x40,0x02,0x42,0x53,0x32,0x23,
    0x36,0x96,0x7a,0x02,0x34,0x05,0xd4,0x42,
    0xb4,0x44,0x62,0x1e,0x67,0x0c,0x30,0x36,
    0x20,0x00,0xb0,0x76,0x20,0xfe,0x63,0x02,
    0x54,0x42,0xb2,0x76,0x20,0xfe,0x64,0x0a,
    0x3d,0xb6,0x20,0xfe,0x50,0xfe,0x3a,0x02,
    0x60,0xda,0x3d,0x81,0x50,0xfe,0x55,0x44,
    0x6e,0xcc,0x4b,0xee,0xff,0x80,0x74,0x40,
    0x78,0x00,0x7e,0x0b,0x30,0x16,0x22,0x16,
    0xee,0x68,0xee,0x69,0x92,0x40,0x67,0x16,
    0x7a,0xff,0xe1,0x6d,0x8a,0x44,0xe0,0xbd,
    0x2a,0xc5,0x3a,0x04,0x9a,0x42,0x48,0x45,
    0x3a,0x00,0x2b,0x45,0x00,0x3c,0x52,0x44,
    0xe3,0xac,0x52,0x42,0xcd,0x5e,0x51,0xcb,
    0xff,0xd4,0x4c,0xdf,0x00,0xc8,0x4e,0x75
};

namespace Headers {

    //
	// These functions are left overs from B2FXEC
	//
  
	int saveiFXEHeader( int type, FWriter* w, char *title, 
        char *author, char* bmpfile, char *rawfile, char* icondata ) {
		return 0;
	}
  
	int fixFXEHeader( int type, FWriter* w, long size ) {
		return 0;
	}

	//
	//
	//
	
	int saveS405ABSHeader( FWriter* w ) {

        int n = w->write(s405_hunk_header,S405_HUNK_HEADER_SIZE);

        if (n != S405_HUNK_HEADER_SIZE) {
            return n;
        }

		return w->write(s405_abs_dec,S405_ABS_DEC_SIZE);
	}
	
	int fixS405ABSHeader( FWriter* w, long offset, const fixInfo* fix ) {
        unsigned char b[4];
        unsigned char *p;
        long t;

        // fix hunk header

        t = (fix->csize + S405_ABS_DEC_SIZE) >> 2;
        p = b;
        PUTL(p,t);
        w->seek(20,IO_SEEK_SET);
        w->write(b,4);
        w->seek(28,IO_SEEK_SET);
        w->write(b,4);

        // fix decruncher load address

        p = b;
        PUTL(p,fix->load);
        w->seek(S405_HUNK_HEADER_SIZE+2,IO_SEEK_SET);
        w->write(b,4);

        // fix decruncher jump address
        
        p = b;
        PUTL(p,fix->jump);
        w->seek(S405_HUNK_HEADER_SIZE+8,IO_SEEK_SET);
        w->write(b,4);
        
        // fix decruncher work address
        
        p = b;
        PUTL(p,fix->work);
        w->seek(S405_HUNK_HEADER_SIZE+14,IO_SEEK_SET);
        w->write(b,4);
        
        // fix decruncher effect address
        p = b;
        PUTL(p,fix->flash);
        w->seek(S405_HUNK_HEADER_SIZE+214,IO_SEEK_SET);
        return w->write(b,4);

	} 

    int saveS405ABSTrailer( FWriter* w, long pos, const fixInfo* fix ) {
		w->seek(0,IO_SEEK_END);
        return w->write(s405_hunk_trailer,S405_HUNK_TRAILER_SIZE);
    }

	//
	//
	//
};
